{"version":3,"sources":["contexts/TasksContext.js","components/AddTask.js","components/Task.js","components/Tasks.js","components/App.js","serviceWorker.js","index.js"],"names":["TasksContext","createContext","TasksProvider","props","useState","JSON","parse","localStorage","getItem","tasks","setTasks","saveTasks","setItem","stringify","Provider","value","addTask","taskText","newId","length","id","text","checked","removeTask","taskId","filter","t","taskChecked","map","children","Consumer","AddTask","React","useContext","task","setTask","ListGroup","className","ListGroupItem","Form","onSubmit","event","preventDefault","Control","type","placeholder","onChange","e","target","Button","Task","Check","Input","onClick","Tasks","key","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAEMA,EAAeC,wBAAc,IAEtBC,EAAgB,SAAAC,GAAU,IAAD,EACRC,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAD9C,mBAC3BC,EAD2B,KACpBC,EADoB,KAG5BC,EAAY,SAAAF,GACdC,EAASD,GACTF,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,KAgBjD,OACI,kBAACT,EAAac,SAAd,CAAuBC,MAAO,CAAEN,QAAOO,QAd3B,SAAAC,GACZ,IAAMC,EAAyB,IAAjBT,EAAMU,OAAe,EAAIV,EAAMA,EAAMU,OAAS,GAAGC,GAAK,EACpET,EAAU,GAAD,mBAAKF,GAAL,CAAY,CAAEW,GAAIF,EAAOG,KAAMJ,EAAUK,SAAS,OAYXC,WATjC,SAAAC,GACfb,EAAUF,EAAMgB,QAAO,SAAAC,GAAC,OAAIA,EAAEN,KAAOI,OAQuBG,YAL5C,SAACH,EAAQF,GACzBX,EAAUF,EAAMmB,KAAI,SAAAF,GAAC,OAAKA,EAAEN,KAAOI,EAAT,eAAuBE,EAAvB,CAA0BJ,QAASA,IAAYI,SAKpEvB,EAAM0B,WAMJ7B,GADcA,EAAa8B,SAC3B9B,G,gCCCA+B,MA9Bf,WAAoB,IACRf,EAAYgB,IAAMC,WAAWjC,GAA7BgB,QADO,EAESZ,mBAAS,IAFlB,mBAER8B,EAFQ,KAEFC,EAFE,KAWf,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACjB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMF,UAAU,SAASG,SAVhB,SAAAC,GACjBA,EAAMC,iBACO,KAATR,IACJlB,EAAQkB,GACRC,EAAQ,OAOI,kBAACI,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLC,YAAY,WACZ9B,MAAOmB,EACPY,SAAU,SAAAC,GAAC,OAAIZ,EAAQY,EAAEC,OAAOjC,UAEpC,kBAACkC,EAAA,EAAD,CAAQZ,UAAU,kBAAkBO,KAAK,UACrC,uBAAGP,UAAU,+BCPtBa,MAff,SAAc/C,GACV,IAAM+B,EAAO/B,EAAM+B,KADF,EAEmBF,IAAMC,WAAWjC,GAA7C2B,EAFS,EAETA,YAAaJ,EAFJ,EAEIA,WAErB,OACI,kBAACe,EAAA,EAAD,CAAeD,UAAU,QACrB,kBAACE,EAAA,EAAKY,MAAMC,MAAZ,CAAkB9B,QAASY,EAAKZ,QAASwB,SAAU,SAAAC,GAAC,OAAIpB,EAAYO,EAAKd,GAAI2B,EAAEC,OAAO1B,YACrFY,EAAKZ,QAAU,6BAAMY,EAAKb,MAAca,EAAKb,KAC9C,kBAAC4B,EAAA,EAAD,CAAQZ,UAAU,QAAQgB,QAAS,kBAAM9B,EAAWW,EAAKd,MACrD,sCCGDkC,MAXf,WAAkB,IACN7C,EAAUuB,IAAMC,WAAWjC,GAA3BS,MACR,OACI,kBAAC2B,EAAA,EAAD,KACK3B,EAAMmB,KAAI,SAAAF,GAAC,OACR,kBAAC,EAAD,CAAM6B,IAAK7B,EAAEN,GAAIc,KAAMR,SCOxB8B,MAXf,WACI,OACI,kBAAC,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9bb93ac6.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nconst TasksContext = createContext([]);\r\n\r\nexport const TasksProvider = props => {\r\n    const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem('tasks')) || []);\r\n\r\n    const saveTasks = tasks => {\r\n        setTasks(tasks);\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    };\r\n\r\n    const addTask = taskText => {\r\n        const newId = tasks.length === 0 ? 0 : tasks[tasks.length - 1].id + 1;\r\n        saveTasks([...tasks, { id: newId, text: taskText, checked: false }]);\r\n    };\r\n\r\n    const removeTask = taskId => {\r\n        saveTasks(tasks.filter(t => t.id !== taskId));\r\n    };\r\n\r\n    const taskChecked = (taskId, checked) => {\r\n        saveTasks(tasks.map(t => (t.id === taskId ? { ...t, checked: checked } : t)));\r\n    };\r\n\r\n    return (\r\n        <TasksContext.Provider value={{ tasks, addTask, removeTask, taskChecked }}>\r\n            {props.children}\r\n        </TasksContext.Provider>\r\n    );\r\n};\r\n\r\nexport const TasksConsumer = TasksContext.Consumer;\r\nexport default TasksContext;\r\n","import React, { useState } from 'react';\r\nimport TasksContext from '../contexts/TasksContext';\r\nimport { ListGroupItem, ListGroup, Form, Button } from 'react-bootstrap';\r\n\r\nfunction AddTask() {\r\n    const { addTask } = React.useContext(TasksContext);\r\n    const [task, setTask] = useState('');\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (task === '') return;\r\n        addTask(task);\r\n        setTask('');\r\n    };\r\n\r\n    return (\r\n        <ListGroup className=\"mt-3 mb-3\">\r\n            <ListGroupItem>\r\n                <Form className=\"d-flex\" onSubmit={handleSubmit}>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"New task\"\r\n                        value={task}\r\n                        onChange={e => setTask(e.target.value)}\r\n                    />\r\n                    <Button className=\"btn-lg ml-3 p-0\" type=\"submit\">\r\n                        <i className=\"fas fa-plus mr-2 ml-2\" />\r\n                    </Button>\r\n                </Form>\r\n            </ListGroupItem>\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default AddTask;\r\n","import React from 'react';\r\nimport { ListGroupItem, Form, Button } from 'react-bootstrap';\r\nimport TasksContext from '../contexts/TasksContext';\r\n\r\nfunction Task(props) {\r\n    const task = props.task;\r\n    const { taskChecked, removeTask } = React.useContext(TasksContext);\r\n\r\n    return (\r\n        <ListGroupItem className=\"pl-5\">\r\n            <Form.Check.Input checked={task.checked} onChange={e => taskChecked(task.id, e.target.checked)} />\r\n            {task.checked ? <del>{task.text}</del> : task.text}\r\n            <Button className=\"close\" onClick={() => removeTask(task.id)}>\r\n                <span>X</span>\r\n            </Button>\r\n        </ListGroupItem>\r\n    );\r\n}\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport TasksContext from '../contexts/TasksContext';\r\nimport Task from './Task';\r\n\r\nfunction Tasks() {\r\n    const { tasks } = React.useContext(TasksContext);\r\n    return (\r\n        <ListGroup>\r\n            {tasks.map(t => (\r\n                <Task key={t.id} task={t} />\r\n            ))}\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default Tasks;\r\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { TasksProvider } from '../contexts/TasksContext';\nimport AddTask from './AddTask';\nimport Tasks from './Tasks';\n\nfunction App() {\n    return (\n        <TasksProvider>\n            <Container>\n                <AddTask />\n                <Tasks />\n            </Container>\n        </TasksProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styles/index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}